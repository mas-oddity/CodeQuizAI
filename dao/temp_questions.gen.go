// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"CodeQuizAI/models"
)

func newTempQuestion(db *gorm.DB, opts ...gen.DOOption) tempQuestion {
	_tempQuestion := tempQuestion{}

	_tempQuestion.tempQuestionDo.UseDB(db, opts...)
	_tempQuestion.tempQuestionDo.UseModel(&models.TempQuestion{})

	tableName := _tempQuestion.tempQuestionDo.TableName()
	_tempQuestion.ALL = field.NewAsterisk(tableName)
	_tempQuestion.ID = field.NewInt64(tableName, "id")
	_tempQuestion.PreviewID = field.NewString(tableName, "preview_id")
	_tempQuestion.TempID = field.NewString(tableName, "temp_id")
	_tempQuestion.Title = field.NewString(tableName, "title")
	_tempQuestion.QuestionType = field.NewString(tableName, "question_type")
	_tempQuestion.Options = field.NewString(tableName, "options")
	_tempQuestion.Answer = field.NewString(tableName, "answer")
	_tempQuestion.Explanation = field.NewString(tableName, "explanation")
	_tempQuestion.Keywords = field.NewString(tableName, "keywords")
	_tempQuestion.Language = field.NewString(tableName, "language")
	_tempQuestion.AiModel = field.NewString(tableName, "ai_model")
	_tempQuestion.UserID = field.NewInt64(tableName, "user_id")
	_tempQuestion.CreatedAt = field.NewTime(tableName, "created_at")
	_tempQuestion.DeletedAt = field.NewField(tableName, "deleted_at")

	_tempQuestion.fillFieldMap()

	return _tempQuestion
}

type tempQuestion struct {
	tempQuestionDo tempQuestionDo

	ALL          field.Asterisk
	ID           field.Int64
	PreviewID    field.String
	TempID       field.String
	Title        field.String
	QuestionType field.String
	Options      field.String
	Answer       field.String
	Explanation  field.String
	Keywords     field.String
	Language     field.String
	AiModel      field.String
	UserID       field.Int64
	CreatedAt    field.Time
	DeletedAt    field.Field

	fieldMap map[string]field.Expr
}

func (t tempQuestion) Table(newTableName string) *tempQuestion {
	t.tempQuestionDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tempQuestion) As(alias string) *tempQuestion {
	t.tempQuestionDo.DO = *(t.tempQuestionDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tempQuestion) updateTableName(table string) *tempQuestion {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.PreviewID = field.NewString(table, "preview_id")
	t.TempID = field.NewString(table, "temp_id")
	t.Title = field.NewString(table, "title")
	t.QuestionType = field.NewString(table, "question_type")
	t.Options = field.NewString(table, "options")
	t.Answer = field.NewString(table, "answer")
	t.Explanation = field.NewString(table, "explanation")
	t.Keywords = field.NewString(table, "keywords")
	t.Language = field.NewString(table, "language")
	t.AiModel = field.NewString(table, "ai_model")
	t.UserID = field.NewInt64(table, "user_id")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *tempQuestion) WithContext(ctx context.Context) ITempQuestionDo {
	return t.tempQuestionDo.WithContext(ctx)
}

func (t tempQuestion) TableName() string { return t.tempQuestionDo.TableName() }

func (t tempQuestion) Alias() string { return t.tempQuestionDo.Alias() }

func (t tempQuestion) Columns(cols ...field.Expr) gen.Columns {
	return t.tempQuestionDo.Columns(cols...)
}

func (t *tempQuestion) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tempQuestion) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 14)
	t.fieldMap["id"] = t.ID
	t.fieldMap["preview_id"] = t.PreviewID
	t.fieldMap["temp_id"] = t.TempID
	t.fieldMap["title"] = t.Title
	t.fieldMap["question_type"] = t.QuestionType
	t.fieldMap["options"] = t.Options
	t.fieldMap["answer"] = t.Answer
	t.fieldMap["explanation"] = t.Explanation
	t.fieldMap["keywords"] = t.Keywords
	t.fieldMap["language"] = t.Language
	t.fieldMap["ai_model"] = t.AiModel
	t.fieldMap["user_id"] = t.UserID
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t tempQuestion) clone(db *gorm.DB) tempQuestion {
	t.tempQuestionDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tempQuestion) replaceDB(db *gorm.DB) tempQuestion {
	t.tempQuestionDo.ReplaceDB(db)
	return t
}

type tempQuestionDo struct{ gen.DO }

type ITempQuestionDo interface {
	gen.SubQuery
	Debug() ITempQuestionDo
	WithContext(ctx context.Context) ITempQuestionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITempQuestionDo
	WriteDB() ITempQuestionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITempQuestionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITempQuestionDo
	Not(conds ...gen.Condition) ITempQuestionDo
	Or(conds ...gen.Condition) ITempQuestionDo
	Select(conds ...field.Expr) ITempQuestionDo
	Where(conds ...gen.Condition) ITempQuestionDo
	Order(conds ...field.Expr) ITempQuestionDo
	Distinct(cols ...field.Expr) ITempQuestionDo
	Omit(cols ...field.Expr) ITempQuestionDo
	Join(table schema.Tabler, on ...field.Expr) ITempQuestionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITempQuestionDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITempQuestionDo
	Group(cols ...field.Expr) ITempQuestionDo
	Having(conds ...gen.Condition) ITempQuestionDo
	Limit(limit int) ITempQuestionDo
	Offset(offset int) ITempQuestionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITempQuestionDo
	Unscoped() ITempQuestionDo
	Create(values ...*models.TempQuestion) error
	CreateInBatches(values []*models.TempQuestion, batchSize int) error
	Save(values ...*models.TempQuestion) error
	First() (*models.TempQuestion, error)
	Take() (*models.TempQuestion, error)
	Last() (*models.TempQuestion, error)
	Find() ([]*models.TempQuestion, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.TempQuestion, err error)
	FindInBatches(result *[]*models.TempQuestion, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.TempQuestion) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITempQuestionDo
	Assign(attrs ...field.AssignExpr) ITempQuestionDo
	Joins(fields ...field.RelationField) ITempQuestionDo
	Preload(fields ...field.RelationField) ITempQuestionDo
	FirstOrInit() (*models.TempQuestion, error)
	FirstOrCreate() (*models.TempQuestion, error)
	FindByPage(offset int, limit int) (result []*models.TempQuestion, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITempQuestionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tempQuestionDo) Debug() ITempQuestionDo {
	return t.withDO(t.DO.Debug())
}

func (t tempQuestionDo) WithContext(ctx context.Context) ITempQuestionDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tempQuestionDo) ReadDB() ITempQuestionDo {
	return t.Clauses(dbresolver.Read)
}

func (t tempQuestionDo) WriteDB() ITempQuestionDo {
	return t.Clauses(dbresolver.Write)
}

func (t tempQuestionDo) Session(config *gorm.Session) ITempQuestionDo {
	return t.withDO(t.DO.Session(config))
}

func (t tempQuestionDo) Clauses(conds ...clause.Expression) ITempQuestionDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tempQuestionDo) Returning(value interface{}, columns ...string) ITempQuestionDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tempQuestionDo) Not(conds ...gen.Condition) ITempQuestionDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tempQuestionDo) Or(conds ...gen.Condition) ITempQuestionDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tempQuestionDo) Select(conds ...field.Expr) ITempQuestionDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tempQuestionDo) Where(conds ...gen.Condition) ITempQuestionDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tempQuestionDo) Order(conds ...field.Expr) ITempQuestionDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tempQuestionDo) Distinct(cols ...field.Expr) ITempQuestionDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tempQuestionDo) Omit(cols ...field.Expr) ITempQuestionDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tempQuestionDo) Join(table schema.Tabler, on ...field.Expr) ITempQuestionDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tempQuestionDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITempQuestionDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tempQuestionDo) RightJoin(table schema.Tabler, on ...field.Expr) ITempQuestionDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tempQuestionDo) Group(cols ...field.Expr) ITempQuestionDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tempQuestionDo) Having(conds ...gen.Condition) ITempQuestionDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tempQuestionDo) Limit(limit int) ITempQuestionDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tempQuestionDo) Offset(offset int) ITempQuestionDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tempQuestionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITempQuestionDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tempQuestionDo) Unscoped() ITempQuestionDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tempQuestionDo) Create(values ...*models.TempQuestion) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tempQuestionDo) CreateInBatches(values []*models.TempQuestion, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tempQuestionDo) Save(values ...*models.TempQuestion) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tempQuestionDo) First() (*models.TempQuestion, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.TempQuestion), nil
	}
}

func (t tempQuestionDo) Take() (*models.TempQuestion, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.TempQuestion), nil
	}
}

func (t tempQuestionDo) Last() (*models.TempQuestion, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.TempQuestion), nil
	}
}

func (t tempQuestionDo) Find() ([]*models.TempQuestion, error) {
	result, err := t.DO.Find()
	return result.([]*models.TempQuestion), err
}

func (t tempQuestionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.TempQuestion, err error) {
	buf := make([]*models.TempQuestion, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tempQuestionDo) FindInBatches(result *[]*models.TempQuestion, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tempQuestionDo) Attrs(attrs ...field.AssignExpr) ITempQuestionDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tempQuestionDo) Assign(attrs ...field.AssignExpr) ITempQuestionDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tempQuestionDo) Joins(fields ...field.RelationField) ITempQuestionDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tempQuestionDo) Preload(fields ...field.RelationField) ITempQuestionDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tempQuestionDo) FirstOrInit() (*models.TempQuestion, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.TempQuestion), nil
	}
}

func (t tempQuestionDo) FirstOrCreate() (*models.TempQuestion, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.TempQuestion), nil
	}
}

func (t tempQuestionDo) FindByPage(offset int, limit int) (result []*models.TempQuestion, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tempQuestionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tempQuestionDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tempQuestionDo) Delete(models ...*models.TempQuestion) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tempQuestionDo) withDO(do gen.Dao) *tempQuestionDo {
	t.DO = *do.(*gen.DO)
	return t
}
