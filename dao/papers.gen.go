// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"CodeQuizAI/models"
)

func newPaper(db *gorm.DB, opts ...gen.DOOption) paper {
	_paper := paper{}

	_paper.paperDo.UseDB(db, opts...)
	_paper.paperDo.UseModel(&models.Paper{})

	tableName := _paper.paperDo.TableName()
	_paper.ALL = field.NewAsterisk(tableName)
	_paper.ID = field.NewInt64(tableName, "id")
	_paper.Title = field.NewString(tableName, "title")
	_paper.Description = field.NewString(tableName, "description")
	_paper.TotalScore = field.NewInt(tableName, "total_score")
	_paper.CreatorID = field.NewInt64(tableName, "creator_id")
	_paper.CreatedAt = field.NewTime(tableName, "created_at")
	_paper.UpdatedAt = field.NewTime(tableName, "updated_at")
	_paper.DeletedAt = field.NewField(tableName, "deleted_at")
	_paper.Creator = paperBelongsToCreator{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Creator", "models.User"),
	}

	_paper.fillFieldMap()

	return _paper
}

type paper struct {
	paperDo paperDo

	ALL         field.Asterisk
	ID          field.Int64
	Title       field.String
	Description field.String
	TotalScore  field.Int
	CreatorID   field.Int64
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field
	Creator     paperBelongsToCreator

	fieldMap map[string]field.Expr
}

func (p paper) Table(newTableName string) *paper {
	p.paperDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p paper) As(alias string) *paper {
	p.paperDo.DO = *(p.paperDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *paper) updateTableName(table string) *paper {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.Title = field.NewString(table, "title")
	p.Description = field.NewString(table, "description")
	p.TotalScore = field.NewInt(table, "total_score")
	p.CreatorID = field.NewInt64(table, "creator_id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")

	p.fillFieldMap()

	return p
}

func (p *paper) WithContext(ctx context.Context) IPaperDo { return p.paperDo.WithContext(ctx) }

func (p paper) TableName() string { return p.paperDo.TableName() }

func (p paper) Alias() string { return p.paperDo.Alias() }

func (p paper) Columns(cols ...field.Expr) gen.Columns { return p.paperDo.Columns(cols...) }

func (p *paper) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *paper) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 9)
	p.fieldMap["id"] = p.ID
	p.fieldMap["title"] = p.Title
	p.fieldMap["description"] = p.Description
	p.fieldMap["total_score"] = p.TotalScore
	p.fieldMap["creator_id"] = p.CreatorID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt

}

func (p paper) clone(db *gorm.DB) paper {
	p.paperDo.ReplaceConnPool(db.Statement.ConnPool)
	p.Creator.db = db.Session(&gorm.Session{Initialized: true})
	p.Creator.db.Statement.ConnPool = db.Statement.ConnPool
	return p
}

func (p paper) replaceDB(db *gorm.DB) paper {
	p.paperDo.ReplaceDB(db)
	p.Creator.db = db.Session(&gorm.Session{})
	return p
}

type paperBelongsToCreator struct {
	db *gorm.DB

	field.RelationField
}

func (a paperBelongsToCreator) Where(conds ...field.Expr) *paperBelongsToCreator {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a paperBelongsToCreator) WithContext(ctx context.Context) *paperBelongsToCreator {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a paperBelongsToCreator) Session(session *gorm.Session) *paperBelongsToCreator {
	a.db = a.db.Session(session)
	return &a
}

func (a paperBelongsToCreator) Model(m *models.Paper) *paperBelongsToCreatorTx {
	return &paperBelongsToCreatorTx{a.db.Model(m).Association(a.Name())}
}

func (a paperBelongsToCreator) Unscoped() *paperBelongsToCreator {
	a.db = a.db.Unscoped()
	return &a
}

type paperBelongsToCreatorTx struct{ tx *gorm.Association }

func (a paperBelongsToCreatorTx) Find() (result *models.User, err error) {
	return result, a.tx.Find(&result)
}

func (a paperBelongsToCreatorTx) Append(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a paperBelongsToCreatorTx) Replace(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a paperBelongsToCreatorTx) Delete(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a paperBelongsToCreatorTx) Clear() error {
	return a.tx.Clear()
}

func (a paperBelongsToCreatorTx) Count() int64 {
	return a.tx.Count()
}

func (a paperBelongsToCreatorTx) Unscoped() *paperBelongsToCreatorTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type paperDo struct{ gen.DO }

type IPaperDo interface {
	gen.SubQuery
	Debug() IPaperDo
	WithContext(ctx context.Context) IPaperDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPaperDo
	WriteDB() IPaperDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPaperDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPaperDo
	Not(conds ...gen.Condition) IPaperDo
	Or(conds ...gen.Condition) IPaperDo
	Select(conds ...field.Expr) IPaperDo
	Where(conds ...gen.Condition) IPaperDo
	Order(conds ...field.Expr) IPaperDo
	Distinct(cols ...field.Expr) IPaperDo
	Omit(cols ...field.Expr) IPaperDo
	Join(table schema.Tabler, on ...field.Expr) IPaperDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPaperDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPaperDo
	Group(cols ...field.Expr) IPaperDo
	Having(conds ...gen.Condition) IPaperDo
	Limit(limit int) IPaperDo
	Offset(offset int) IPaperDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPaperDo
	Unscoped() IPaperDo
	Create(values ...*models.Paper) error
	CreateInBatches(values []*models.Paper, batchSize int) error
	Save(values ...*models.Paper) error
	First() (*models.Paper, error)
	Take() (*models.Paper, error)
	Last() (*models.Paper, error)
	Find() ([]*models.Paper, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Paper, err error)
	FindInBatches(result *[]*models.Paper, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Paper) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPaperDo
	Assign(attrs ...field.AssignExpr) IPaperDo
	Joins(fields ...field.RelationField) IPaperDo
	Preload(fields ...field.RelationField) IPaperDo
	FirstOrInit() (*models.Paper, error)
	FirstOrCreate() (*models.Paper, error)
	FindByPage(offset int, limit int) (result []*models.Paper, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPaperDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p paperDo) Debug() IPaperDo {
	return p.withDO(p.DO.Debug())
}

func (p paperDo) WithContext(ctx context.Context) IPaperDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p paperDo) ReadDB() IPaperDo {
	return p.Clauses(dbresolver.Read)
}

func (p paperDo) WriteDB() IPaperDo {
	return p.Clauses(dbresolver.Write)
}

func (p paperDo) Session(config *gorm.Session) IPaperDo {
	return p.withDO(p.DO.Session(config))
}

func (p paperDo) Clauses(conds ...clause.Expression) IPaperDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p paperDo) Returning(value interface{}, columns ...string) IPaperDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p paperDo) Not(conds ...gen.Condition) IPaperDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p paperDo) Or(conds ...gen.Condition) IPaperDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p paperDo) Select(conds ...field.Expr) IPaperDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p paperDo) Where(conds ...gen.Condition) IPaperDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p paperDo) Order(conds ...field.Expr) IPaperDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p paperDo) Distinct(cols ...field.Expr) IPaperDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p paperDo) Omit(cols ...field.Expr) IPaperDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p paperDo) Join(table schema.Tabler, on ...field.Expr) IPaperDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p paperDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPaperDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p paperDo) RightJoin(table schema.Tabler, on ...field.Expr) IPaperDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p paperDo) Group(cols ...field.Expr) IPaperDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p paperDo) Having(conds ...gen.Condition) IPaperDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p paperDo) Limit(limit int) IPaperDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p paperDo) Offset(offset int) IPaperDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p paperDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPaperDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p paperDo) Unscoped() IPaperDo {
	return p.withDO(p.DO.Unscoped())
}

func (p paperDo) Create(values ...*models.Paper) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p paperDo) CreateInBatches(values []*models.Paper, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p paperDo) Save(values ...*models.Paper) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p paperDo) First() (*models.Paper, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Paper), nil
	}
}

func (p paperDo) Take() (*models.Paper, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Paper), nil
	}
}

func (p paperDo) Last() (*models.Paper, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Paper), nil
	}
}

func (p paperDo) Find() ([]*models.Paper, error) {
	result, err := p.DO.Find()
	return result.([]*models.Paper), err
}

func (p paperDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Paper, err error) {
	buf := make([]*models.Paper, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p paperDo) FindInBatches(result *[]*models.Paper, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p paperDo) Attrs(attrs ...field.AssignExpr) IPaperDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p paperDo) Assign(attrs ...field.AssignExpr) IPaperDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p paperDo) Joins(fields ...field.RelationField) IPaperDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p paperDo) Preload(fields ...field.RelationField) IPaperDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p paperDo) FirstOrInit() (*models.Paper, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Paper), nil
	}
}

func (p paperDo) FirstOrCreate() (*models.Paper, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Paper), nil
	}
}

func (p paperDo) FindByPage(offset int, limit int) (result []*models.Paper, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p paperDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p paperDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p paperDo) Delete(models ...*models.Paper) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *paperDo) withDO(do gen.Dao) *paperDo {
	p.DO = *do.(*gen.DO)
	return p
}
