// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"CodeQuizAI/models"
)

func newPaperQuestion(db *gorm.DB, opts ...gen.DOOption) paperQuestion {
	_paperQuestion := paperQuestion{}

	_paperQuestion.paperQuestionDo.UseDB(db, opts...)
	_paperQuestion.paperQuestionDo.UseModel(&models.PaperQuestion{})

	tableName := _paperQuestion.paperQuestionDo.TableName()
	_paperQuestion.ALL = field.NewAsterisk(tableName)
	_paperQuestion.ID = field.NewInt64(tableName, "id")
	_paperQuestion.PaperID = field.NewInt64(tableName, "paper_id")
	_paperQuestion.QuestionID = field.NewInt64(tableName, "question_id")
	_paperQuestion.QuestionOrder = field.NewInt(tableName, "question_order")
	_paperQuestion.Score = field.NewInt(tableName, "score")
	_paperQuestion.CreatedAt = field.NewTime(tableName, "created_at")
	_paperQuestion.Paper = paperQuestionBelongsToPaper{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Paper", "models.Paper"),
		Creator: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Paper.Creator", "models.User"),
		},
	}

	_paperQuestion.Question = paperQuestionBelongsToQuestion{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Question", "models.Question"),
		User: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Question.User", "models.User"),
		},
	}

	_paperQuestion.fillFieldMap()

	return _paperQuestion
}

type paperQuestion struct {
	paperQuestionDo paperQuestionDo

	ALL           field.Asterisk
	ID            field.Int64
	PaperID       field.Int64
	QuestionID    field.Int64
	QuestionOrder field.Int
	Score         field.Int
	CreatedAt     field.Time
	Paper         paperQuestionBelongsToPaper

	Question paperQuestionBelongsToQuestion

	fieldMap map[string]field.Expr
}

func (p paperQuestion) Table(newTableName string) *paperQuestion {
	p.paperQuestionDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p paperQuestion) As(alias string) *paperQuestion {
	p.paperQuestionDo.DO = *(p.paperQuestionDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *paperQuestion) updateTableName(table string) *paperQuestion {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.PaperID = field.NewInt64(table, "paper_id")
	p.QuestionID = field.NewInt64(table, "question_id")
	p.QuestionOrder = field.NewInt(table, "question_order")
	p.Score = field.NewInt(table, "score")
	p.CreatedAt = field.NewTime(table, "created_at")

	p.fillFieldMap()

	return p
}

func (p *paperQuestion) WithContext(ctx context.Context) IPaperQuestionDo {
	return p.paperQuestionDo.WithContext(ctx)
}

func (p paperQuestion) TableName() string { return p.paperQuestionDo.TableName() }

func (p paperQuestion) Alias() string { return p.paperQuestionDo.Alias() }

func (p paperQuestion) Columns(cols ...field.Expr) gen.Columns {
	return p.paperQuestionDo.Columns(cols...)
}

func (p *paperQuestion) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *paperQuestion) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 8)
	p.fieldMap["id"] = p.ID
	p.fieldMap["paper_id"] = p.PaperID
	p.fieldMap["question_id"] = p.QuestionID
	p.fieldMap["question_order"] = p.QuestionOrder
	p.fieldMap["score"] = p.Score
	p.fieldMap["created_at"] = p.CreatedAt

}

func (p paperQuestion) clone(db *gorm.DB) paperQuestion {
	p.paperQuestionDo.ReplaceConnPool(db.Statement.ConnPool)
	p.Paper.db = db.Session(&gorm.Session{Initialized: true})
	p.Paper.db.Statement.ConnPool = db.Statement.ConnPool
	p.Question.db = db.Session(&gorm.Session{Initialized: true})
	p.Question.db.Statement.ConnPool = db.Statement.ConnPool
	return p
}

func (p paperQuestion) replaceDB(db *gorm.DB) paperQuestion {
	p.paperQuestionDo.ReplaceDB(db)
	p.Paper.db = db.Session(&gorm.Session{})
	p.Question.db = db.Session(&gorm.Session{})
	return p
}

type paperQuestionBelongsToPaper struct {
	db *gorm.DB

	field.RelationField

	Creator struct {
		field.RelationField
	}
}

func (a paperQuestionBelongsToPaper) Where(conds ...field.Expr) *paperQuestionBelongsToPaper {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a paperQuestionBelongsToPaper) WithContext(ctx context.Context) *paperQuestionBelongsToPaper {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a paperQuestionBelongsToPaper) Session(session *gorm.Session) *paperQuestionBelongsToPaper {
	a.db = a.db.Session(session)
	return &a
}

func (a paperQuestionBelongsToPaper) Model(m *models.PaperQuestion) *paperQuestionBelongsToPaperTx {
	return &paperQuestionBelongsToPaperTx{a.db.Model(m).Association(a.Name())}
}

func (a paperQuestionBelongsToPaper) Unscoped() *paperQuestionBelongsToPaper {
	a.db = a.db.Unscoped()
	return &a
}

type paperQuestionBelongsToPaperTx struct{ tx *gorm.Association }

func (a paperQuestionBelongsToPaperTx) Find() (result *models.Paper, err error) {
	return result, a.tx.Find(&result)
}

func (a paperQuestionBelongsToPaperTx) Append(values ...*models.Paper) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a paperQuestionBelongsToPaperTx) Replace(values ...*models.Paper) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a paperQuestionBelongsToPaperTx) Delete(values ...*models.Paper) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a paperQuestionBelongsToPaperTx) Clear() error {
	return a.tx.Clear()
}

func (a paperQuestionBelongsToPaperTx) Count() int64 {
	return a.tx.Count()
}

func (a paperQuestionBelongsToPaperTx) Unscoped() *paperQuestionBelongsToPaperTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type paperQuestionBelongsToQuestion struct {
	db *gorm.DB

	field.RelationField

	User struct {
		field.RelationField
	}
}

func (a paperQuestionBelongsToQuestion) Where(conds ...field.Expr) *paperQuestionBelongsToQuestion {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a paperQuestionBelongsToQuestion) WithContext(ctx context.Context) *paperQuestionBelongsToQuestion {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a paperQuestionBelongsToQuestion) Session(session *gorm.Session) *paperQuestionBelongsToQuestion {
	a.db = a.db.Session(session)
	return &a
}

func (a paperQuestionBelongsToQuestion) Model(m *models.PaperQuestion) *paperQuestionBelongsToQuestionTx {
	return &paperQuestionBelongsToQuestionTx{a.db.Model(m).Association(a.Name())}
}

func (a paperQuestionBelongsToQuestion) Unscoped() *paperQuestionBelongsToQuestion {
	a.db = a.db.Unscoped()
	return &a
}

type paperQuestionBelongsToQuestionTx struct{ tx *gorm.Association }

func (a paperQuestionBelongsToQuestionTx) Find() (result *models.Question, err error) {
	return result, a.tx.Find(&result)
}

func (a paperQuestionBelongsToQuestionTx) Append(values ...*models.Question) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a paperQuestionBelongsToQuestionTx) Replace(values ...*models.Question) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a paperQuestionBelongsToQuestionTx) Delete(values ...*models.Question) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a paperQuestionBelongsToQuestionTx) Clear() error {
	return a.tx.Clear()
}

func (a paperQuestionBelongsToQuestionTx) Count() int64 {
	return a.tx.Count()
}

func (a paperQuestionBelongsToQuestionTx) Unscoped() *paperQuestionBelongsToQuestionTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type paperQuestionDo struct{ gen.DO }

type IPaperQuestionDo interface {
	gen.SubQuery
	Debug() IPaperQuestionDo
	WithContext(ctx context.Context) IPaperQuestionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPaperQuestionDo
	WriteDB() IPaperQuestionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPaperQuestionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPaperQuestionDo
	Not(conds ...gen.Condition) IPaperQuestionDo
	Or(conds ...gen.Condition) IPaperQuestionDo
	Select(conds ...field.Expr) IPaperQuestionDo
	Where(conds ...gen.Condition) IPaperQuestionDo
	Order(conds ...field.Expr) IPaperQuestionDo
	Distinct(cols ...field.Expr) IPaperQuestionDo
	Omit(cols ...field.Expr) IPaperQuestionDo
	Join(table schema.Tabler, on ...field.Expr) IPaperQuestionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPaperQuestionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPaperQuestionDo
	Group(cols ...field.Expr) IPaperQuestionDo
	Having(conds ...gen.Condition) IPaperQuestionDo
	Limit(limit int) IPaperQuestionDo
	Offset(offset int) IPaperQuestionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPaperQuestionDo
	Unscoped() IPaperQuestionDo
	Create(values ...*models.PaperQuestion) error
	CreateInBatches(values []*models.PaperQuestion, batchSize int) error
	Save(values ...*models.PaperQuestion) error
	First() (*models.PaperQuestion, error)
	Take() (*models.PaperQuestion, error)
	Last() (*models.PaperQuestion, error)
	Find() ([]*models.PaperQuestion, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.PaperQuestion, err error)
	FindInBatches(result *[]*models.PaperQuestion, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.PaperQuestion) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPaperQuestionDo
	Assign(attrs ...field.AssignExpr) IPaperQuestionDo
	Joins(fields ...field.RelationField) IPaperQuestionDo
	Preload(fields ...field.RelationField) IPaperQuestionDo
	FirstOrInit() (*models.PaperQuestion, error)
	FirstOrCreate() (*models.PaperQuestion, error)
	FindByPage(offset int, limit int) (result []*models.PaperQuestion, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPaperQuestionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p paperQuestionDo) Debug() IPaperQuestionDo {
	return p.withDO(p.DO.Debug())
}

func (p paperQuestionDo) WithContext(ctx context.Context) IPaperQuestionDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p paperQuestionDo) ReadDB() IPaperQuestionDo {
	return p.Clauses(dbresolver.Read)
}

func (p paperQuestionDo) WriteDB() IPaperQuestionDo {
	return p.Clauses(dbresolver.Write)
}

func (p paperQuestionDo) Session(config *gorm.Session) IPaperQuestionDo {
	return p.withDO(p.DO.Session(config))
}

func (p paperQuestionDo) Clauses(conds ...clause.Expression) IPaperQuestionDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p paperQuestionDo) Returning(value interface{}, columns ...string) IPaperQuestionDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p paperQuestionDo) Not(conds ...gen.Condition) IPaperQuestionDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p paperQuestionDo) Or(conds ...gen.Condition) IPaperQuestionDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p paperQuestionDo) Select(conds ...field.Expr) IPaperQuestionDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p paperQuestionDo) Where(conds ...gen.Condition) IPaperQuestionDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p paperQuestionDo) Order(conds ...field.Expr) IPaperQuestionDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p paperQuestionDo) Distinct(cols ...field.Expr) IPaperQuestionDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p paperQuestionDo) Omit(cols ...field.Expr) IPaperQuestionDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p paperQuestionDo) Join(table schema.Tabler, on ...field.Expr) IPaperQuestionDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p paperQuestionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPaperQuestionDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p paperQuestionDo) RightJoin(table schema.Tabler, on ...field.Expr) IPaperQuestionDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p paperQuestionDo) Group(cols ...field.Expr) IPaperQuestionDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p paperQuestionDo) Having(conds ...gen.Condition) IPaperQuestionDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p paperQuestionDo) Limit(limit int) IPaperQuestionDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p paperQuestionDo) Offset(offset int) IPaperQuestionDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p paperQuestionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPaperQuestionDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p paperQuestionDo) Unscoped() IPaperQuestionDo {
	return p.withDO(p.DO.Unscoped())
}

func (p paperQuestionDo) Create(values ...*models.PaperQuestion) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p paperQuestionDo) CreateInBatches(values []*models.PaperQuestion, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p paperQuestionDo) Save(values ...*models.PaperQuestion) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p paperQuestionDo) First() (*models.PaperQuestion, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.PaperQuestion), nil
	}
}

func (p paperQuestionDo) Take() (*models.PaperQuestion, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.PaperQuestion), nil
	}
}

func (p paperQuestionDo) Last() (*models.PaperQuestion, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.PaperQuestion), nil
	}
}

func (p paperQuestionDo) Find() ([]*models.PaperQuestion, error) {
	result, err := p.DO.Find()
	return result.([]*models.PaperQuestion), err
}

func (p paperQuestionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.PaperQuestion, err error) {
	buf := make([]*models.PaperQuestion, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p paperQuestionDo) FindInBatches(result *[]*models.PaperQuestion, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p paperQuestionDo) Attrs(attrs ...field.AssignExpr) IPaperQuestionDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p paperQuestionDo) Assign(attrs ...field.AssignExpr) IPaperQuestionDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p paperQuestionDo) Joins(fields ...field.RelationField) IPaperQuestionDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p paperQuestionDo) Preload(fields ...field.RelationField) IPaperQuestionDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p paperQuestionDo) FirstOrInit() (*models.PaperQuestion, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.PaperQuestion), nil
	}
}

func (p paperQuestionDo) FirstOrCreate() (*models.PaperQuestion, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.PaperQuestion), nil
	}
}

func (p paperQuestionDo) FindByPage(offset int, limit int) (result []*models.PaperQuestion, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p paperQuestionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p paperQuestionDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p paperQuestionDo) Delete(models ...*models.PaperQuestion) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *paperQuestionDo) withDO(do gen.Dao) *paperQuestionDo {
	p.DO = *do.(*gen.DO)
	return p
}
